*,
::after,
::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --flex-item-color: #9aa559;
  --flex-item-border-color: rgb(165, 46, 119);
  --panel-border-color: #222;
  --header-color:#2ddf5c;
  --dark-green: hsl(120, 49%, 12%);
}

html {
  font-family: sans-serif;

}


/* Setting the section heights to a % requires we define the
height of their parent, which is the body. */
body {
  background-color: #ccc;
  /* margin: 10px; */
  height: 100vh;
}

.app-title{
  font-size: 1.3rem;
  vertical-align: middle;
}
.main-header{
  width:100%;
  background:var(--header-color);
  color: var(--dark-green);
  font-weight: bold;
  margin:2px 0px;
  padding:8px 14px;
  border-bottom:3px solid var(--dark-green);
}


/* nav, div, li are all block level elements */
.main-header > div,
.main-nav,
.main-nav-item {
  display:inline-block;
}


.main-nav{
  text-align:right;
  vertical-align: middle;
  width:calc(100% - 220px);
 
}

.main-nav-item{
  margin:0px 12px;
}

.main-nav-item a{
  text-decoration:none;
  color:inherit;
  padding: 2px 8px;
  border-radius: 8px;
  border:1px solid var(--header-color);
}


ul {
  list-style: none;
}

.main-nav-item a:hover, 
.main-nav-item a:active {
  cursor:pointer;
  background:wheat;
  border:1px solid var(--dark-green);

}

/* This wrapper encompasses all elements, so you must set both its width and height so the children can reference off these values.  For example, by not setting a height, the wrapper takes the height of the content only.  This wrappers parent is the <body> which is full viewport, and the wrapper should also be full viewport.  The result is that the second row (of <sections> can establish their height based on a % of their parent which is this wrapper */
/* Using inline-block for all <section> tags allows converting
typical block level elements to inline, thus displaying them in a single row (which will wrap in smaller viewports).  Unlike pure 'inline', this also permits a width/height to be set, plus using floats to push specific elements to either side. */
div.main-wrapper {
  width: 100%;
  height: 100%;
  display: inline-block;
}

#panel-wrapper {
  /* width: 75%; */

  height: 455px;
  background-color: #666;
}

/* Wrapper for both Settings blocks.  Since the main-wrapper is inline, and there is a block keeping to the left edge (CSS Result) block, we move this section to the right by using position:relative (to its original position)*/
/* Float:left allows positioning of an inline/inline-block element to the left side of the parent element.  Since the previous element in the DOM is a block level element, this <section> takes up the left edge of the second row of DOM elements */



/* Vertical-Align:top saved the entire layout from being ruined after I removed the overflow from the panels.   Whew */
.panel {
  display: inline-block;
  vertical-align: top;
  background-color: slategray;

  /* width: 24%; */
  margin-left:4px;
  margin-top:4px;
  border: 1px solid var(--panel-border-color);
  width: 300px;
  height: 446px;
  min-width: 300px;
  max-width: 300px;
}



#css-panel {
  /* border: 1px solid red; */
  /* height:360px; */
  min-width: 300px;
  max-width: none;
  width: calc(100% - 938px);
  /* background-color: red; */
 
  /* background:indigo; */
  /* font-family: monospace; */
}

#css-output {
  font-family: monospace;
  font-weight:bold;
  font-size:1rem;
  height: calc(100% - 40px);
  /* border-bottom: 1px solid var(--panel-border-color); */
  overflow:scroll;
}

.button {
  display: inherit;
  width: 30%;
  max-width:6rem;
  margin-right: 5px;
  border-radius: 6px;
  padding: 4px 0px;
  cursor: pointer;
}

.button:hover,
.button:focus{
  cursor:pointer;
  background-color: wheat;
}

.button-set {
  position: relative;
  background: slategray;
  padding: 8px;
  padding-left: 12px;
  display: inline-block;
  width: 100%;
}

#flex-container-buttons {
  margin-top: 60px;
}

#flex-item-buttons {
  margin-top: 8px;
}


#flex-container-reset-button {
  float: right;
}

li.input-field,
li.dimensions {
  padding: 4px;
  width: 100%;
  display: inline-block;
}

li.input-field label {
  /* background:coral; */
  display: inherit;
  width: 130px;
}
li.input-field .setting-item {
  display: inherit;
  width: 148px;
}

li.dimensions > label {
  /* border:1px solid red; */
  display: inherit;
  width: 112px;
}

li.dimensions input[type='number'] {
  width: 50px;
}

/* li.flex-item-checkbox {
  display: inline-block;
  padding: 8px 0px;
} */
div.checkbox-wrapper {
  background: black;
  color: white;
  margin-top: 0;
  text-align: center;
}
li.flex-item-checkbox label {
  width: 20px;
  padding: 0px 20px;
  /* vertical-align: middle; */
  /* height:20px; */
}

/* Position absolute ignores DOM element ordering of elements and sets up a new positioning context where this element is positioned based on its nearest neighbor in the layout that has its position property set. */

textarea#media-queries {
  width: calc(100% - 8px);
  margin: 0px 4px;
  height: 356px;
}

/* The buttons are positioned by setting their position:relative which allows me to adjust the top by pixels until it is displayed at the bottom of the panel (which is not adjustable.   The original top is determined by its relationship to adjacent DOM elements */
li.button-set#media-query-buttons {
  position: relative;
  top: 48px;
}

/* Display:block us used for an otherwise inline element (<span>) in order to center the text inside the containing <section>  */
span.section-title {
  padding: 6px 0px;
  display: block;
  width: 100%;
  text-align: center;
  font-weight: bold;
  margin-bottom: 0.3rem;
  background-color: black;
  color: white;
}

/*I ended up wrapping the <textare> in a div.flex-items-settings-block in order to style each repeating block of controls used to manipulate individual flex-items in the parent layout.  The wrapping <div> needed to be reduced by 1.4rem to make up for the left margin set on the <ol> which effectively shifted the entire <ol> to the right, truncating the width of the <li> in the <ol> and their respetive contents. */
#flex-item-settings textarea {
  margin-top: 10px;
  width: 100%;
  overflow: scroll;
  text-align: center;
}

ul.containers-list {
  /* position:relative; */
  /* display:inline-block; */
  width: 100%;
  align-items: top;
}

ul.containers-list li {
  display: inline-block;
}
ul.containers-list li.portrait {
  width: calc(20% - 6px);
  max-width: 400px;
}

ul.containers-list li.landscape {
  width: 70%;
}

/* div.button-container {
  width: 100%;
  padding: 8px;
  border: 1px solid #555;
} */

/* li.dimensions.flex-container input[type=checkbox]{
    background-color: coral;
   border-color:red;
   width:200px;
} */
