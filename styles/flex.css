
/* Inside the full-width flex container are children (ie flex-items */
div.flex-item {
    border: 1px solid var(--flex-item-border-color);
    background-color: var(--flex-item-color);
    height: 80px;
    width: 80px;
  }
  
  /* This rule is for the content of each flex-item.  By default, a span is inline, so setting the display to block permits assigning an explicit width/height ()which is based on the parent container, in this case the div.flex-items which wraps this span.    If you just put a single char (like a numeric value), then padding-vertical:40% will get it to about the middle of the element.  Otherwise, the content should flow and size according to its specified width/height. */
  span.flex-item-content {
    border: 1px solid orange;
    width: 100%;
    height: 100%;
    display: block;
    text-align: center;
    padding: 40% 0;
  }
  
  div.flex-container#portrait {
    /* position: relative; */
    /* top:0; */
    /* width: 300px; */
    /* max-width: 500px; */
    /* height: 100%; */
    /* height: 100%; */
    /* float:right; */
    /* top: 0px; */
    /* left:75%; */
    border: 1px solid black;
    background: khaki;
  }
  
  /* At the bottom is a full-width flex container */
  div.flex-container#landscape {
    
    position: relative;
    background: indigo;
    border: 1px solid black;
    /* height:100%;
    width:100%; */
    
  }
  
  div.flex-setting {
    padding: 0.3rem;
  }
  
  div.flex-item-settings-block {
    /* width:calc(100% - 1.4rem); */
    border: 1px solid #666;
    padding: 0.3rem;
  }
  
  div.flex-item-choices {
    padding: 0.3rem;
  }
  
  /* Normally <li> are block level elements (take up the full width), but for this array of items, it should be arrange horizontally, so display:inline-block works best, allowing also to set width/height values for each one. */
  /* div.flex-items-checked li.flex-item-checkboxs {
    order: 1px solid goldenrod;
    display: inline-block;
    width: 20%;
  }
   */